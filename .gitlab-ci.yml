image: node:18

stages:
  - lint
  - test
  - build
  - deploy

.distributed:
  interruptible: true
  only:
    - main
    - merge_requests
  cache:
    key:
      files:
        - yarn.lock
    paths:
      - .yarn/
  before_script:
    - yarn install --frozen-lockfile --cache .yarn --prefer-offline
    - NX_HEAD=$CI_COMMIT_SHA
    - NX_BASE=${CI_MERGE_REQUEST_DIFF_BASE_SHA:-$CI_COMMIT_BEFORE_SHA}
  artifacts:
    paths:
      - node_modules/.cache/nx

lint-all:
  stage: lint
  extends: .distributed
  script:
    - npx nx workspace-lint --base=$NX_BASE --head=$NX_HEAD

lint:commit:
  stage: lint
  script:
    - echo "${CI_COMMIT_MESSAGE}" | npx commitlint

lint:
  stage: lint
  extends: .distributed
  script:
    - npx nx affected --base=$NX_BASE --head=$NX_HEAD --target=lint --parallel=3

test:
  stage: test
  extends: .distributed
  services:
    - postgres:15.2-alpine
  variables:
    PG_HOST: postgres
    PG_PORT: 5432
    POSTGRES_DB: testdb
    POSTGRES_USER: pguser
    POSTGRES_PASSWORD: pgpassword
    GANDALF_DB_USERNAME: $POSTGRES_USER
    RICK_DB_USERNAME: $POSTGRES_USER
    FLUFFY_DB_USERNAME: $POSTGRES_USER
    GANDALF_DB_PASSWORD: $POSTGRES_PASSWORD
    RICK_DB_PASSWORD: $POSTGRES_PASSWORD
    FLUFFY_DB_PASSWORD: $POSTGRES_PASSWORD
    GANDALF_DB_HOST: $PG_HOST
    RICK_DB_HOST: $PG_HOST
    FLUFFY_DB_HOST: $PG_HOST
    GANDALF_DB_PORT: $PG_PORT
    RICK_DB_PORT: $PG_PORT
    FLUFFY_DB_PORT: $PG_PORT
    RICK_DB_NAME: $POSTGRES_DB
    FLUFFY_DB_NAME: $POSTGRES_DB
    GANDALF_DB_NAME: $POSTGRES_DB
  script:
    - npx nx affected --base=$NX_BASE --head=$NX_HEAD --target=test --parallel=3 --ci --code-coverage

build:
  stage: build
  extends: .distributed
  script:
    - npx nx affected --base=$NX_BASE --head=$NX_HEAD --target=build --parallel=3

push to registry:
  image: docker:20.10.16
  stage: build
  services:
    - docker:20.10.16-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - "docker build -t ${CI_REGISTRY_IMAGE}/anton_prod:${CI_COMMIT_REF_SLUG} . --target=anton_prod && docker push ${CI_REGISTRY_IMAGE}/anton_prod:${CI_COMMIT_REF_SLUG}"
    - "docker build -t ${CI_REGISTRY_IMAGE}/princess_prod:${CI_COMMIT_REF_SLUG} . --target=princess_prod && docker push ${CI_REGISTRY_IMAGE}/princess_prod:${CI_COMMIT_REF_SLUG}"
    - "docker build -t ${CI_REGISTRY_IMAGE}/fluffy_prod:${CI_COMMIT_REF_SLUG} . --target=fluffy_prod && docker push ${CI_REGISTRY_IMAGE}/fluffy_prod:${CI_COMMIT_REF_SLUG}"
    - "docker build -t ${CI_REGISTRY_IMAGE}/gandalf_prod:${CI_COMMIT_REF_SLUG} . --target=gandalf_prod && docker push ${CI_REGISTRY_IMAGE}/gandalf_prod:${CI_COMMIT_REF_SLUG}"
    - "docker build -t ${CI_REGISTRY_IMAGE}/kafo_prod:${CI_COMMIT_REF_SLUG} . --target=kafo_prod && docker push ${CI_REGISTRY_IMAGE}/kafo_prod:${CI_COMMIT_REF_SLUG}"
    - "docker build -t ${CI_REGISTRY_IMAGE}/morty_prod:${CI_COMMIT_REF_SLUG} . --target=morty_prod && docker push ${CI_REGISTRY_IMAGE}/morty_prod:${CI_COMMIT_REF_SLUG}"
    - "docker build -t ${CI_REGISTRY_IMAGE}/rick_prod:${CI_COMMIT_REF_SLUG} . --target=rick_prod && docker push ${CI_REGISTRY_IMAGE}/rick_prod:${CI_COMMIT_REF_SLUG}"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'

deploy to testnet k8s cluster:
  stage: deploy
  when: on_success
  needs: ["push to registry"]
  image:
    name: bitnami/kubectl:latest
    entrypoint: [""]
  script:
    - kubectl config use-context ngrave/rana/app/be:gke-agent
    - "kubectl set image deployment/anton-deployment anton-prod=${CI_REGISTRY_IMAGE}/anton_prod:${CI_COMMIT_REF_SLUG}"
    - "kubectl set image deployment/fluffy-deployment fluffy-prod=${CI_REGISTRY_IMAGE}/fluffy_prod:${CI_COMMIT_REF_SLUG}"
    - "kubectl set image deployment/gandalf-deployment gandalf-prod=${CI_REGISTRY_IMAGE}/gandalf_prod:${CI_COMMIT_REF_SLUG}"
    - "kubectl set image deployment/kafo-deployment kafo-prod=${CI_REGISTRY_IMAGE}/kafo_prod:${CI_COMMIT_REF_SLUG}"
    - "kubectl set image deployment/morty-deployment morty-prod=${CI_REGISTRY_IMAGE}/morty_prod:${CI_COMMIT_REF_SLUG}"
    - "kubectl set image deployment/princess-deployment princess-prod=${CI_REGISTRY_IMAGE}/princess_prod:${CI_COMMIT_REF_SLUG}"
    - "kubectl set image deployment/rick-deployment rick-prod=${CI_REGISTRY_IMAGE}/rick_prod:${CI_COMMIT_REF_SLUG}"
  environment:
    name: testnet gke cluster
    url: http://35.240.5.170
    kubernetes:
      namespace: default
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'

deploy to mainnet k8s cluster:
  stage: deploy
  when: on_success
  needs: ["push to registry"]
  image:
    name: bitnami/kubectl:latest
    entrypoint: [""]
  script:
    - kubectl config use-context ngrave/rana/app/be:gke-agent && kubectl config set-context --current --namespace=mainnet
    - "kubectl set image deployment/anton-deployment anton-prod=${CI_REGISTRY_IMAGE}/anton_prod:${CI_COMMIT_REF_SLUG}"
    - "kubectl set image deployment/fluffy-deployment fluffy-prod=${CI_REGISTRY_IMAGE}/fluffy_prod:${CI_COMMIT_REF_SLUG}"
    - "kubectl set image deployment/gandalf-deployment gandalf-prod=${CI_REGISTRY_IMAGE}/gandalf_prod:${CI_COMMIT_REF_SLUG}"
    - "kubectl set image deployment/kafo-deployment kafo-prod=${CI_REGISTRY_IMAGE}/kafo_prod:${CI_COMMIT_REF_SLUG}"
    - "kubectl set image deployment/morty-deployment morty-prod=${CI_REGISTRY_IMAGE}/morty_prod:${CI_COMMIT_REF_SLUG}"
    - "kubectl set image deployment/princess-deployment princess-prod=${CI_REGISTRY_IMAGE}/princess_prod:${CI_COMMIT_REF_SLUG}"
    - "kubectl set image deployment/rick-deployment rick-prod=${CI_REGISTRY_IMAGE}/rick_prod:${CI_COMMIT_REF_SLUG}"
  environment:
    name: mainnet gke cluster
    url: http://35.240.5.170
    kubernetes:
      namespace: mainnet
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'